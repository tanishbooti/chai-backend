import mongoose, {Schema} from "mongoose";
import jwt from "jsonwebtoken"
//jwt is a library that allows you to create and verify JSON Web Tokens
// You log in → server checks your info → gives you a token (like a digital ID card).
//You send that token along with your requests (like "get my profile info").
//The server checks the token and if it’s valid, lets you in.
//jwt can create tokens and also check if they are valid.





import bcrypt from "bcrypt"
//userSchema is a set if input fields that define the data we want to store in the database
//index  here refers to the index of the field in the database
const userSchema = new Schema(
    {
        username: {
            type: String,
            required: true,
            unique: true,
            lowercase: true,
            trim: true, 
            index: true //indexing the username field for faster search
        },
        email: {
            type: String,
            required: true,
            unique: true,
            lowecase: true,
            trim: true, 
        },
        fullName: {
            type: String,
            required: true,
            trim: true, 
            index: true
        },
        avatar: {
            type: String, // cloudinary url
            required: true,
        },
        coverImage: {
            type: String, // cloudinary url
        },
        watchHistory: [
            {
                type: Schema.Types.ObjectId,
                ref: "Video"
            } //refers to videos that the user has watched and videos are referred to by their id in videoSchema
        ],
        password: {
            type: String,
            required: [true, 'Password is required'] //gives error message if password is not provided
        }, 
        refreshToken: {
            type: String
        }

    },
    {
        timestamps: true //createdAt and updatedAt fields will be added to the schema
    }
)



//jab data 'save' hone ja rha hoga toh usse just pehle ('pre') password ko hash kar do 
//pre middleware is a function that runs before the save function is called
//save is a function that saves the data to the database
//pre middleware is a function that runs before the save function is called
//next means that the next function in the middleware will be called
//next is a function that tells mongoose to continue with the next middleware
userSchema.pre("save", async function (next) {
    if(!this.isModified("password")) return next(); //agr passowrd change nahi hua toh next function ko call kar do
//agr if condition nhi lgayeyenge toh har bari profile update hone par password hash hoga (chahe name ya email change hua ho)
    this.password = await bcrypt.hash(this.password, 10)
    /* this refers to the current document being saved
    hashing the password with bcrypt
    10 is the number of rounds of hashing
    the higher the number of rounds, the more secure the password is
    but it takes more time to hash the password
    hashing the password with bcrypt
    this.password = hashed password */
    
    next()
})

//mongoose schema methods are functions that can be called on the document
//isPasswordCorrect is a function that checks if the password is correct
// this async function takes password as an argument
//this refers to the current document being saved
//bcrypt.compare compares the password with the hashed password
//returns true if the password is correct


userSchema.methods.isPasswordCorrect = async function(password){
    return await bcrypt.compare(password, this.password)
}


//jwt is a bearer token. jo bhi user login karega uska ek token generate hoga
//generateAccessToken is a function that generates a token for the user
userSchema.methods.generateAccessToken = function(){
    return jwt.sign( //.sign is a function that creates a token
        {
            _id: this._id, //id is generated by default by mongoose
            email: this.email,
            username: this.username,
            fullName: this.fullName
        },
        process.env.ACCESS_TOKEN_SECRET, //this secret makes the token unique
        {
            expiresIn: process.env.ACCESS_TOKEN_EXPIRY
        }
    )
}

// access token is a short-lived token that is used to authenticate the user
// refresh token is a long-lived token that is used to refresh the access token

userSchema.methods.generateRefreshToken = function(){
    return jwt.sign(
        {
            _id: this._id,
            
        },
        process.env.REFRESH_TOKEN_SECRET,
        {
            expiresIn: process.env.REFRESH_TOKEN_EXPIRY
        }
    )
}

export const User = mongoose.model("User", userSchema)
//referring to userSchema and thus making it a model with the name User and we are calling that model User